# -*- coding: utf-8 -*-
# pylint: disable=R0903
#       R0903: Too few public methods

"""
This module is the SQLAlchemy_ ORM for the ``redacted`` database.

It was auto-generated by running ``flask-sqlacodegen $conn_str --noviews
--outfile redacted.py`` and then modified to:

1. remove non-declarative tables
2. add relationships
3. Add class docstrings
4. Fix tables names to not have spaces and to be CamelCase.

Created by Douglas Thor on 2016-09-12 21:32:33 UTC.

.. _SQLAlchemy: http://www.sqlalchemy.org/
"""
# ---------------------------------------------------------------------------
### Imports
# ---------------------------------------------------------------------------
# In case this is loaded in python 2.X
from __future__ import division

# Standard Library
import itertools
import datetime
import functools

# Third-Party
from sqlalchemy import Column
from sqlalchemy import Date
from sqlalchemy import DateTime
from sqlalchemy import Enum
from sqlalchemy import Float
from sqlalchemy import ForeignKey
from sqlalchemy import Integer
from sqlalchemy import Numeric
from sqlalchemy import String
from sqlalchemy import Text
from sqlalchemy import Time
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy.orm import reconstructor
from sqlalchemy.schema import FetchedValue
import sqlalchemy.types as types


# Package / Application
from . import module_u
from .module_p import ListAttributeProxy, DictAttributeProxy
from .api_helpers import PK_NN_AI_Int_Column


# ---------------------------------------------------------------------------
### Custom Types
# ---------------------------------------------------------------------------
class NullableFloat(types.TypeDecorator):
    """
    Translate the empy string '' to None.

    This leaves all other values unaffected.
    """

    impl = types.Float

    def process_bind_param(self, value, dialect):
        if value == '':
            return None
        else:
            return value

    def process_result_value(self, value, dialect):
        return value


class AddStrMethods(object):
    """
    A decorator which adds a sensible ``__repr__`` to ORM classes.

    Parameters
    ----------
    *args : strings
        Names of attributes which are important and should be included in the
        representation.
    """

    def __init__(self, *args):
        self._pkey_attrs = args

    def __call__(self, class_):
        def __repr__(s):
            pkey_string = ", ".join([str(getattr(s, attr))
                                     for attr in self._pkey_attrs])
            return "<{table}: {pkey} at {id:#x}>".format(table=s.__tablename__,
                                                         pkey=pkey_string,
                                                         id=id(s))

        class_.__repr__ = __repr__
        return class_


# ---------------------------------------------------------------------------
### Constants
# ---------------------------------------------------------------------------
Base = declarative_base()
metadata = Base.metadata
